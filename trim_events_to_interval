def trim_events_to_interval(df: pd.DataFrame, event_start_date_time: str, event_duration: int, min_start_time: str, max_end_time: str, tolerance: int):
    """
    Adjusts event times in a DataFrame to ensure they fall within a specified time range,
    and calculates the discarded duration for events outside the range.

    Args:
    df (pd.DataFrame): The input DataFrame containing event data.
    event_start_time (str): The name of the event start time field (datetime) in the DataFrame.
    event_duration (str): The name of the event duration field (integer in seconds) in the DataFrame.
    min_start_time (str): The minimum start time (in 'HH:MM' format).
    max_end_time (str): The maximum end time (in 'HH:MM' format).
    tolerance (int): The tolerance in seconds.

    Returns:
    pd.DataFrame: A DataFrame with the original index, new start time, new duration, and discarded duration.
    """

    # Ensure the input DataFrame has the required columns
    for col in [event_start_date_time, event_duration]:
        if col not in df.columns:
            raise ValueError(f"Required column '{col}' not found in DataFrame.")

    # Create default datetimes for comparison
    try:
        default_date = datetime(2025, 1, 1)  # Use a fixed date for comparison
        min_start_dt = datetime.combine(default_date, datetime.strptime(min_start_time, '%H:%M').time())
        max_end_dt = datetime.combine(default_date, datetime.strptime(max_end_time, '%H:%M').time())
    except ValueError:
        raise ValueError("The 'min_start_time' and 'max_end_time' must be strings in 'HH:MM' format.")

    # Check that min_start_time is less than max_end_time
    if min_start_dt >= max_end_dt:
        raise ValueError("min_start_time must be less than max_end_time")

    # Ensure the event start time column is in datetime format
    df[event_start_date_time] = pd.to_datetime(df[event_start_date_time])

    # Initialize lists to hold the new values
    start_times = []
    original_durations = []
    new_durations = []
    discarded_durations = []

    # Iterate through each event
    for index, row in df.iterrows():
        start_time = row[event_start_date_time]
        duration = row[event_duration]
        end_time = start_time + timedelta(seconds=duration)
        discarded_duration = 0
        new_duration = 0

        # Calculate the minimum and maximum datetime for the current event's date
        event_date = start_time.date()
        min_start_dt = datetime.combine(event_date, datetime.strptime(min_start_time, '%H:%M').time()) - timedelta(seconds=tolerance)
        max_end_dt = datetime.combine(event_date, datetime.strptime(max_end_time, '%H:%M').time()) + timedelta(seconds=tolerance)

        # Calculate the duration to discard if start time is before the minimum start time
        if start_time < min_start_dt:
            if end_time < min_start_dt:
                discarded_duration += duration
            else:
                discarded_duration += int((min_start_dt - start_time).total_seconds())

        # Calculate the duration to discard if end time is after the maximum end time
        if end_time > max_end_dt:
            if start_time > max_end_dt:
                discarded_duration += duration
            else:
                discarded_duration += int((end_time - max_end_dt).total_seconds())

        new_duration = duration - discarded_duration

        # Append the original and new values to the lists
        start_times.append(start_time)
        original_durations.append(duration)
        new_durations.append(new_duration)
        discarded_durations.append(discarded_duration)

    # Create a new DataFrame with the adjusted values
    result_df = pd.DataFrame({
        'original_index': df.index,
        'event_start_date_time_': start_times,
        'original_duration_': original_durations,
        'new_duration_': new_durations,
        'discarded_duration_': discarded_durations
    })

    return result_df

# Sample usage
data = {
    'event_start_time': ['2025-02-02 06:52:29', '2025-02-02 12:14:00', '2025-02-02 18:37:28'],
    'event_duration': [3600, 765, 5400],  # durations in seconds
    'user': ['user1', 'user1', 'user2']
}
df = pd.DataFrame(data)

result_df = trim_events_to_interval(df, 'event_start_time', 'event_duration', '07:00', '18:30', 450)

result_df
