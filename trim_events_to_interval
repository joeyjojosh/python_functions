import pandas as pd
from datetime import datetime, timedelta

def trim_events_to_interval(df: pd.DataFrame, start_date_time: str, duration: str, min_start_time: str, max_end_time: str, tolerance: int):
    """
    Adjusts event times in a DataFrame to ensure they fall within a specified time range plus tolerance.
    """
    # Ensure the input DataFrame has the required columns
    for col in [start_date_time, duration]:
        if col not in df.columns:
            raise ValueError(f"Required column '{col}' not found in DataFrame.")

    # Create default datetimes for comparison
    default_date = datetime(2025, 1, 1)
    min_start_dt = datetime.combine(default_date, datetime.strptime(min_start_time, '%H:%M').time())
    max_end_dt = datetime.combine(default_date, datetime.strptime(max_end_time, '%H:%M').time())

    # Check that min_start_time is less than max_end_time
    if min_start_dt >= max_end_dt:
        raise ValueError("min_start_time must be less than max_end_time")

    # Ensure the event start time column is in datetime format
    df = df.assign(**{start_date_time: pd.to_datetime(df[start_date_time])})

    # Precompute tolerance
    tolerance_delta = timedelta(seconds=tolerance)

    # Vectorized operations for min_start and max_end
    event_date = df[start_date_time].dt.date

    min_start = pd.to_datetime(event_date.astype(str) + ' ' + min_start_time) - tolerance_delta
    max_end = pd.to_datetime(event_date.astype(str) + ' ' + max_end_time) + tolerance_delta

    start = df[start_date_time]
    end = start + pd.to_timedelta(df[duration], unit='s')

    # Calculate func_start, func_end, func_duration, func_discard_dur
    func_start = start.clip(lower=min_start)
    func_end = end.clip(upper=max_end)
    
    discard_before = (min_start - start).dt.total_seconds().clip(lower=0)
    discard_after = (end - max_end).dt.total_seconds().clip(lower=0)
    
    # Ensure discarded duration does not exceed the original duration
    total_discard = discard_before + discard_after
    total_discard = total_discard.clip(upper=df[duration])
    
    func_duration = df[duration] - total_discard
    func_duration = func_duration.clip(lower=0)  # Ensure non-negative duration

    # Create the result DataFrame
    result_df = df.assign(
        func_start=func_start,
        func_end=func_end,
        func_duration=func_duration,
        func_discard_dur=total_discard
    )

    return result_df

# Sample usage
data = {
    'string_field': ['seg', 'gre', 'srg'],
    'event_start_time': ['2025-02-02 06:52:29', '2025-02-02 12:14:00', '2025-02-02 18:37:28'],
    'event_duration': [300, 300, 300],
    'user': ['user1', 'user1', 'user2']
}

df = pd.DataFrame(data)

result_df = trim_events_to_interval(df, 'event_start_time', 'event_duration', '07:00', '18:30', 450)

result_df
